#analysis of algorithm
## Q1

3-SUM in quadratic time. Design an algorithm for the 3-SUM problem that takes time proportional to n^2 in the worst case. You may assume that you can sort the n integers in time proportional to n^2 or better.

### linear time algorithm for 2-sum
public class Twosum {
    private int[] a;

    public Twosum(int[] b) {
        int n = b.length;
        a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = b[i];
        }
    }

    public int[] findx(int x) {
        int i = 0;
        int j = a.length - 1;
        int[] ind = new int[2];
        while (i < j) {
            if (a[i] + a[j] == x) {
                ind[0] = i;
                ind[1] = j;
                return ind;
            }
            else {
                if (a[i] + a[j] < x) {
                    i++;
                }
                else {
                    j--;
                }
            }
        }
        ind[0] = -1;
        ind[1] = -1;
        return ind;
    }

    public static void main(String[] args) {
        int n = StdIn.readInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = StdIn.readInt();
        }
        int x = StdIn.readInt();
        Twosum test = new Twosum(a);
        int[] result = test.findx(x);
        StdOut.println(result[0] + " " + result[1]);
    }
}

##Q2: how to find x in a bitonic array using ~2logN compares and ~3logN compares?

### for ~3logN compares: using binary, find the maximum in the array-find medium, compare medium to its left/right neighbor, if left<medium, then shift to [medium+1,up]; Otherwise, shift to [lower,medium-1].
then using ascending binary search on [lower,maximumindex] and descending binary search on [maximumindex+1,upper].

### for ~2logN compares:refer to Binomic.java

##Q3: drop eggs. find T where the egg breaks for the first time(it's also the model of find the maximum/minimun of binotic array)
**version 1:** 1 egg, T tosses  sequential search
**version 2:** logN egg, logN tosses binary search
**version 3:** logT egg, 2logT tosses find a interval <= 2T, implement binary search on this interval
**version 4:** 2 egg, 2\sqrt(n) tosses partition into \sqrt(n) intervals of length \sqrt(n), sequentially toss, then determine the interval [(i-1)*par+1,i*par], using sequential search
**version 5:** 2 egg, \sqrt(2n) tosses partition into intervals of decreasing to 1 length which is summed up to n, sequentially toss, then then determine the interval [(i-1)*par+1,i*par], using sequential search
**version 6:** 2 egg, <=2\sqrt(2T) tosses partition into intervals of increasing length from 1. sequentially toss, then then determine the interval [(i-1)*par+1,i*par], using sequential search
rough proof of v6: after s sequential test, the egg breaks for the first time ,then the total tosses will be 2s. and we know that 1+...+(s-1)=s(s-1)/2 < T <=s(s+1)/2. Thus, 2s <=2\sqrt(2T).
Implementation: refers to DropEggs.java

#sort
##Q1.找两个二维点集的交集
排序后，然后两个指针指向两个点集，遍历找是否相同。refer to interaction
##Q2.确定两个数集，一个是否是另一个的permutation。refer to IsPermut
